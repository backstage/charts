# Default values for the Backstage chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []

## @section Common parameters

## @param kubeVersion Override Kubernetes version
##
kubeVersion: ""
## @param nameOverride String to partially override common.names.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param clusterDomain Default Kubernetes cluster domain
##
clusterDomain: cluster.local
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []
## Enable diagnostic mode in the statefulset
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers in the statefulset
  ##
  command:
    - sleep
  ## @param diagnosticMode.args Args to override all containers in the statefulset
  ##
  args:
    - infinity

## @section Ingress parameters
ingress:
  ## @param ingress.enabled Enable the creation of the ingress resource
  enabled: false

  ## @param ingress.className Name of the IngressClass cluster resource which defines which controller will implement the resource (e.g nginx)
  className: ""

  ## @param ingress.annotations Additional annotations for the Ingress resource
  annotations: {}

  ## @param host Hostname to be used to expose the route to access the backstage application (e.g: backstage.IP.nip.io)
  host: ""

  ## @section Ingress TLS parameters
  tls:

    ## @param ingress.tls.enabled Enable TLS configuration for the host defined at `ingress.host` parameter
    enabled: false

    ## @param ingress.tls.secretName The name to which the TLS Secret will be called
    secretName: ""

## @section Backstage parameters

## Backstage image version
## @param image.registry Backstage image registry
## @param image.repository Backstage image repository
## @param image.tag Backstage image tag (immutable tags are recommended)
## @param image.pullPolicy Backstage image pull policy
## @param image.pullSecrets Specify docker-registry secret names as an array
## @param image.debug Specify if debug values should be set
##

backstage:
  image:
    registry: ghcr.io
    repository: backstage/backstage
    tag: latest
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Set to true if you would like to see extra information on logs
    ##
    debug: false
  containerPorts:
    backend: 7007
  command: ["node", "packages/backend"]
  args: []
  extraAppConfig:
    - filename: app-config.yaml
      configMapRef: app-config
      data: |
        app:
          title: Scaffolded Backstage App
          baseUrl: http://localhost:3000

          support:
            url: https://github.com/polarpoint-io/backstage/issues # Used by common ErrorPage
            items: # Used by common SupportButton component
              - title: Issues
                icon: github
                links:
                  - url: https://github.com/backstage/backstage/issues
                    title: GitHub Issues
              - title: Slack Chatroom
                icon: chat
                links:
                  - url: https://polarpoint.slack.com/archives/C03T35W09HC
                    title: '#backstage'

        organization:
          name: Polarpoint

        backend:
          # Used for enabling authentication, secret is shared by all backend plugins
          # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
          # information on the format
          # auth:
          #   keys:
          #     - secret: ${BACKEND_SECRET}
          baseUrl: http://localhost:7007
          listen:
            port: 7007
          csp:
            connect-src: ["'self'", 'http:', 'https:']
            img-src: ["'self'", 'data:', 'https://avatars.githubusercontent.com']
            # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
            # Default Helmet Content-Security-Policy values can be removed by setting the key to false
          cors:
            origin: http://localhost:3000
            methods: [GET, POST, PUT, DELETE]
            credentials: true
          database:
            client: pg
            connection:
              host: ${POSTGRES_HOST}
              port: ${POSTGRES_PORT}
              user: ${POSTGRES_USER}
              password: ${POSTGRES_PASSWORD}
          cache:
            store: memory
          # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir


        integrations:
          github:
            - host: github.com
              token: ${GITHUB_TOKEN}
            ### Example for how to add your GitHub Enterprise instance using the API:
            # - host: ghe.example.net
            #   apiBaseUrl: https://ghe.example.net/api/v3
            #   token: ${GHE_TOKEN}

        kubernetes:
          serviceLocatorMethod:
            type: multiTenant
          clusterLocatorMethods:
            - type: config
              clusters:
                - url: ${K8S_URL}
                  name: tooling
                  authProvider: serviceAccount
                  skipTLSVerify: true
                  skipMetricsLookup: true
                  serviceAccountToken: ${K8S_TOKEN}

        # Reference documentation http://backstage.io/docs/features/techdocs/configuration
        # Note: After experimenting with basic setup, use CI/CD to generate docs
        # and an external cloud storage when deploying TechDocs for production use-case.
        # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
        techdocs:
          builder: 'local' # Alternatives - 'external'
          generator:
            runIn: 'local' # Alternatives - 'local or docker'
          publisher:
            type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

        # techdocs:
        #   publisher:
        #     type: 'awsS3'
        #     awsS3:
        #       bucketName: 'name-of-techdocs-storage-bucket'
        #       region: ${AWS_REGION}
        #       credentials:
        #         accessKeyId: ${AWS_ACCESS_KEY_ID}
        #         secretAccessKey: ${AWS_SECRET_ACCESS_KEY}

        proxy:
          '/sonarqube':
            target: http://sonar.sonar.svc/api
            allowedMethods: ['GET']
            # note that the colon after the token is required
            auth: '${SONARQUBE_TOKEN}:'
            # Environmental variable: SONARQUBE_TOKEN
            # Fetch the sonar-auth-token from https://sonarcloud.io/account/security/

          '/argocd/api':
            target: http://argocd-server.argocd.svc/api/v1/
            changeOrigin: true
            # only if your argocd api has self-signed cert
            secure: true
            headers:
              Cookie:
                $env: ARGOCD_AUTH_TOKEN

          '/grafana/api':
            # May be an internal DNS
            target: http://grafana.monitoring.svc:3000/
            headers:
              Authorization: Bearer ${GRAFANA_TOKEN}

          '/prometheus/api':
            # url to the api and path of your hosted prometheus instance
            target: http://prometheus.monitoring.svc:9090/api/v1/


        sonarQube:
          baseUrl: https://code-analysis.polarpoint.io

        grafana:
          domain: https://dashboard.polarpoint.io

        # auth:
        #   # see https://backstage.io/docs/auth/ to learn about auth providers
        #   providers: {}

        auth:
          environment: development
          ### Providing an auth.session.secret will enable session support in the auth-backend
          # session:
          #   secret: custom session secret
          providers:
            github:
              development:
                clientId: ${AUTH_GITHUB_CLIENT_ID}
                clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
                # enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}

        scaffolder:
          # see https://backstage.io/docs/features/software-templates/configuration for software template options
          defaultAuthor:
            name: ':robot: [backstage-bot]'
            email: mail@polarpoint.io
          # defaultCommitMessage: "ðŸ¤– U can't touch this" # Defaults to 'Initial commit'

        # Force Deploy

        catalog:
          import:
            entityFilename: catalog-info.yaml
            pullRequestBranchName: backstage-integration
          rules:
            - allow:
                - API
                - Component
                - Domain
                - Group
                - System
                - User
                - Template
                - Resource
                - Location

          locations:
            # Backstage components
            - type: url
              target: https://github.com/polarpoint-io/backstage-catalog/blob/main/all.yaml
    - filename: app-config.production.yaml
      configMapRef: app-config-production    
      data: |
        app:
          title: polarpoint
          baseUrl: https://platform.polarpoint.io

        backend:
          # Note that the baseUrl should be the URL that the browser and other clients
          # should use when communicating with the backend, i.e. it needs to be
          # reachable not just from within the backend host, but from all of your
          # callers. When its value is "http://localhost:7007", it's strictly private
          # and can't be reached by others.
          baseUrl: https://platform.polarpoint.io
          listen:
            port: 7007
            # The following host directive binds to all IPv4 interfaces when its value
            # is "0.0.0.0". This is the most permissive setting. The right value depends
            # on your specific deployment. If you remove the host line entirely, the
            # backend will bind on the interface that corresponds to the backend.baseUrl
            # hostname.
            host: 0.0.0.0

          csp:
            connect-src: ["'self'", 'http:', 'https:']
            # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
            # Default Helmet Content-Security-Policy values can be removed by setting the key to false

          cors:
            origin: https://platform.polarpoint.io
            #methods: [GET, POST, PUT, DELETE]
            #credentials: true
          # config options: https://node-postgres.com/api/client
          database:
            client: pg
            connection:
              host: ${POSTGRES_HOST}
              port: ${POSTGRES_PORT}
              user: ${POSTGRES_USER}
              password: ${POSTGRES_PASSWORD}
              # https://node-postgres.com/features/ssl
              # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
              # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
              # ssl:
              #   ca: # if you have a CA file and want to verify it you can uncomment this section
              #     $file: <file-path>/ca/server.crt

          cache:
            store: memory
          # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

        integrations:
          github:
            - host: github.com
              token: ${GITHUB_TOKEN}
            ### Example for how to add your GitHub Enterprise instance using the API:
            # - host: ghe.example.net
            #   apiBaseUrl: https://ghe.example.net/api/v3
            #   token: ${GHE_TOKEN}

        # Reference documentation http://backstage.io/docs/features/techdocs/configuration
        # Note: After experimenting with basic setup, use CI/CD to generate docs
        # and an external cloud storage when deploying TechDocs for production use-case.
        # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach

        techdocs:
          builder: 'local' # Alternatives - 'external'
          generator:
            runIn: 'local' # Alternatives - 'local'
          publisher:
            type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

        auth:
          environment: production
          ### Providing an auth.session.secret will enable session support in the auth-backend
          # session:
          #   secret: custom session secret
          providers:
            github:
              production:
                clientId: ${AUTH_GITHUB_CLIENT_ID}
                clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
                # enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
  extraEnvVars:
    - name: APP_CONFIG_backend_baseUrl
      value: https://platform.polarpoint.io
    - name: APP_CONFIG_backend_origin
      value: https://platform.polarpoint.io
    - name: APP_CONFIG_app_baseUrl
      value: https://platform.polarpoint.io
    - name: POSTGRES_HOST
      value: "backstage-postgresql-non-prod"
  extraEnvVarsSecrets:
    - backstage-database-authentication
    - backstage-kubernetes-authentication
    - backstage-github-authentication
  extraVolumeMounts: []
  extraVolumes: []

  ## @param backstage.podSecurityContext Security settings for a Pod.
  ## The security settings that you specify for a Pod apply to all Containers in the Pod.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  podSecurityContext: {}

  ## @param backstage.containerSecurityContext Security settings for a Container
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext: {}

## @section Traffic Exposure parameters

## Service parameters
##
service:
  ## @param service.type Kubernetes Service type
  ##
  type: ClusterIP
  ## @param service.ports.backend Backstage svc port for client connections
  ##
  ports:
    backend: 7007
  ## @param service.nodePorts.backend Node port for the Backstage client connections
  ## NOTE: choose port between <30000-32767>
  ##
  nodePorts:
    backend: ""
  ## @param service.sessionAffinity Control where client requests go, to the same pod or round-robin
  ## Values: ClientIP or None
  ## ref: https://kubernetes.io/docs/user-guide/services/
  ##
  sessionAffinity: None
  ## @param service.clusterIP Backstage service Cluster IP
  ## e.g.:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP Backstage service Load Balancer IP
  ## ref: https://kubernetes.io/docs/user-guide/services/#type-loadbalancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerSourceRanges Backstage service Load Balancer sources
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalTrafficPolicy Backstage service external traffic policy
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.annotations Additional custom annotations for Backstage service
  ##
  annotations: {}
  ## @param service.extraPorts Extra ports to expose in the Backstage service (normally used with the `sidecar` value)
  ##
  extraPorts: []

## Network policies
## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
##
networkPolicy:
  ## @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created
  ##
  enabled: false

  externalAccess:
    from: []
  ## @param networkPolicy.egressRules.customRules [object] Custom network policy rule
  ##
  egressRules:
    ## Additional custom egress rules
    ## e.g:
    ## customRules:
    ##   - to:
    ##       - namespaceSelector:
    ##           matchLabels:
    ##             label: example
    customRules: []


# -- PostgreSQL [chart configuration](https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml)
postgresql:

  # -- Switch to enable or disable the PostgreSQL helm chart
  enabled: false

  # -- The authentication details of the Postgres database
  auth:

    # -- Name for a custom user to create
    username: bn_backstage

    # -- Password for the custom user to create
    password: ""

    # -- Name of existing secret to use for PostgreSQL credentials
    existingSecret: ""

    # -- The secret keys Postgres will look for to retrieve the relevant password
    secretKeys:

      # -- The key in which Postgres will look for, for the admin password, in the existing Secret
      adminPasswordKey: admin-password

      # -- The key in which Postgres will look for, for the user password, in the existing Secret
      userPasswordKey: user-password

      # -- The key in which Postgres will look for, for the replication password, in the existing Secret
      replicationPasswordKey: replication-password

  # -- PostgreSQL architecture (`standalone` or `replication`)
  architecture: standalone

# -- Service Account Configuration
serviceAccount:

  # -- Enable the creation of a ServiceAccount for Backstage pods
  create: false

  # -- Name of the created ServiceAccount
  # If not set and `serviceAccount.create` is true, a name is generated
  name: ""

  # -- Additional custom labels to the service ServiceAccount.
  labels: {}

  # -- Additional custom annotations for the ServiceAccount.
  annotations: {}

  # -- Auto-mount the service account token in the pod
  automountServiceAccountToken: true
